- 内容: 'Happy Beam'
  提示: ''
  翻译: '快乐光束'
- 内容: 'Leverage a Full Space to create a fun game using ARKit.'
  提示: ''
  翻译: '利用 Full Space 使用 ARKit 创建有趣的游戏。'
- 内容: 'Overview'
  提示: ''
  翻译: '概述'
- 内容: 'In visionOS, you can create fun, dynamic games and apps using several different frameworks to create new kinds of spatial experiences: RealityKit, ARKit, SwiftUI, and Group Activities. This sample introduces Happy Beam, a game where you and your friends can hop on a FaceTime call and play together.'
  提示: ''
  翻译: '在 visionOS 中，您可以使用多种不同的框架创建有趣、动态的游戏和应用，以创建新型空间体验：RealityKit、ARKit、SwiftUI 和 Group Activities。此示例介绍了快乐光束(Happy Beam)，这是一款游戏，您和朋友可以在其中进行 FaceTime 通话并一起玩。'
- 内容: 'You’ll learn the mechanics of the game where grumpy clouds float around in the space, and people play by making a heart shape with their hands to project a beam. People aim the beam at the clouds to cheer them up, and a score counter keeps track of how well each player does cheering up the clouds.'
  提示: 'Grumpy clouds 在此处被译为暴躁乌云。'
  翻译: '这个游戏的机制是：暴躁乌云在空间中漂浮，玩家通过用心形手势投射光束来进行游戏。玩家使用光束射击乌云并使其振作起来，同时记分器会记录每个玩家在振奋乌云时的表现。'
- 内容: 'Design the game interface in SwiftUI'
  提示: ''
  翻译: '使用 SwiftUI 设计游戏界面'
- 内容: 'Most apps in visionOS launch as a window that opens different scene types depending on the needs of the app.'
  提示: ''
  翻译: 'visionOS 中的大多数应用都以窗口的形式启动，该窗口会根据应用的需要打开不同的场景类型。'
- 内容: 'Here you see how Happy Beam presents a fun interface to people by using several SwiftUI views that display a welcome screen, a coaching screen that gives instructions, a scoreboard, and a game-ending screen.'
  提示: ''
  翻译: '在这里，您可以看到 Happy Beam 如何使用多个 SwiftUI 视图向玩家呈现一个有趣的用户界面，其中包括了欢迎界面、提供规则说明的教学界面、记分板和游戏结束界面。'
- 内容: 'The following shows you the primary view in the app that displays each phase of gameplay:'
  提示: ''
  翻译: '下方代码中包含了应用中每个游戏阶段显示的主要视图：'
- 内容: 'When 3D content starts to appear, the game opens an immersive space to present content outside of the main window and in a person’s surroundings.'
  提示: ''
  翻译: '当 3D 内容开始出现时，游戏会打开一个沉浸式空间，以在主窗口之外，玩家周围环境之中呈现内容。'
- 内容: 'The HappyBeam container view declares a dependency on openImmersiveSpace:'
  提示: '依赖变量 openImmersiveSpace 的类型是 OpenImmersiveSpaceAction，是用于打开沉浸式空间的操作，详见 https://developer.apple.com/documentation/swiftui/openimmersivespaceaction'
  翻译: 'HappyBeam 容器视图定义了一个名为 openImmersiveSpace 的依赖：'
- 内容: 'It later uses that dependency to open the space from the app’s declaration when it’s time to start showing 3D content:'
  提示: ''
  翻译: '稍后，当需要开始显示 3D 内容时，该视图会使用此依赖从应用的声明中打开沉浸式空间：'
- 内容: 'Detect a heart gesture with ARKit'
  提示: ''
  翻译: '使用 ARKit 检测心形手势'
- 内容: 'The Happy Beam app recognizes the central heart-shaped hands gesture using ARKit’s support for 3D hand tracking in visionOS. Using hand tracking requires a running session and authorization from the wearer. It uses the NSHandsTrackingUsageDescription user info key to explain to players why the app requests permission for hand tracking.'
  提示: '想了解更多和 ARKitSession 相关的内容，请参考 https://developer.apple.com/documentation/arkit/arkitsession'
  翻译: 'Happy Beam 应用程序使用 ARKit 支持的 visionOS 中 3D 手部追踪功能来识别中央心形手势。使用手部追踪需要一个运行中的会话（ARKitSession）以及设备佩戴者的授权。它使用 NSHandsTrackingUsageDescription 用户信息键中的字符串向玩家解释为什么应用程序请求手部追踪权限。'
- 内容: 'Hand-tracking data isn’t available when your app is only displaying a window or volume. Instead, it’s available when you present an immersive space, as in the previous example.'
  提示: ''
  翻译: '当您的应用仅显示窗口或体量时，手部追踪数据不可用。相反，当您演示沉浸式空间时，它可用，如上例所示。'
- 内容: 'You can detect gestures using ARKit data with a level of accuracy that depends on your use case and intended experience. For example, Happy Beam could require strict positioning of finger joints to closely resemble a heart shape. Instead, however, it prompts people to make a heart shape and uses a heuristic to indicate when the gesture is close enough.'
  提示: ''
  翻译: '您可以使用 ARKit 数据检测手势，其准确程度取决于您的用例和预期体验。例如，Happy Beam 可以更加严格地要求手指关节位置，规定手势必须非常接近心形。然而，实际上应用会提示人们摆出心形手势，并使用启发式的方法来提示手势已经足够接近心形。'
- 内容: 'The following checks whether a person’s thumbs and index fingers are almost touching:'
  提示: ''
  翻译: '下述代码检查玩家的拇指和食指是否近乎接触：'
- 内容: 'Support several kinds of input'
  提示: ''
  翻译: '支持多种输入类型'
- 内容: 'To support accessibility features and general user preferences, include multiple kinds of input in an app that uses hand tracking as one form of input.'
  提示: ''
  翻译: '为了支持辅助功能和用户首选项，请在使用手部追踪作为输入形式的应用中包含并支持多种输入类型。'
- 内容: 'Happy Beam supports several kinds of input:'
  提示: ''
  翻译: 'Happy Beam 支持以下几种输入方式：'
- 内容: 'Display 3D content with RealityKit'
  提示: ''
  翻译: '使用 RealityKit 展示 3D 内容'
- 内容: 'The 3D content in the app comes in the form of assets that you can export from Reality Composer Pro. You place each asset in the RealityView that represents your immersive space.'
  提示: ''
  翻译: '应用程序中的 3D 内容以资源的形式提供，您可以从 Reality Composer Pro 中导出这些资源。应用将每个资源放置在一个代表沉浸式空间的 RealityView 中。'
- 内容: 'The following shows how Happy Beam generates clouds when the game starts, as well as materials for the floor-based beam projector. Because the game uses collision detection to keep score — the beam cheers up grumpy clouds when they collide — you make collision shapes for each model that might be involved.'
  提示: ''
  翻译: '下述代码展示了 Happy Beam 在游戏开始时如何生成云朵，以及地面上的激光发射器的材质。因为游戏使用碰撞检测来计算得分——当碰撞时，光束会让暴躁乌云开心起来——所以你要为每个可能参与互动的模型制作碰撞体积。'
- 内容: 'Add SharePlay support for multiplayer gaming experiences'
  提示: ''
  翻译: '添加 SharePlay 以支持多人游戏体验'
- 内容: 'You use the Group Activities framework in visionOS to support SharePlay during a FaceTime call. Happy Beam uses Group Activities to sync the score, active players list, and the position of each player’s projected beam.'
  提示: ''
  翻译: '您可以在 visionOS 中通过 Group Activities 框架在 FaceTime 通话期间支持 SharePlay。Happy Beam 使用 Group Activities 来同步分数、活跃玩家列表以及每个玩家射出光束的位置。'
- 内容: 'Note'
  提示: ''
  翻译: '注意'
- 内容: 'Developers using the Apple Vision Pro developer kit can test spatial SharePlay experiences on-device by installing the Persona Preview Profile.'
  提示: ''
  翻译: '使用 Apple Vision Pro developer kit 的开发者可以通过安装 Persona Preview Profile 在设备上测试空间中的 SharePlay 体验。'
- 内容: 'Use a reliable channel to send information that’s important to be correct, even if it can be slightly delayed as a result. The following shows how Happy Beam updates the game model’s score state in response to a score message:'
  提示: ''
  翻译: '使用可靠的频道发送要求正确性的信息，即使因此可能会稍有延迟。下面展示了 Happy Beam 如何根据分数信息更新游戏模型的分数状态：'
- 内容: 'Use an unreliable messenger for sending data with low-latency requirements. Because the delivery mode is unreliable, some messages might not make it. Happy Beam uses the unreliable mode to send live updates to the position of the beam when each participant in the call chooses the Spatial option in FaceTime.'
  提示: ''
  翻译: '使用不可靠的信使发送具有低延迟要求的数据。由于传递模式不可靠，因此某些消息可能无法送达。当 FaceTime 参与者在通话中选择 Spatial 选项时，Happy Beam 会使用不可靠模式发送光束位置的实时更新。'
- 内容: 'The following shows how Happy Beam serializes beam data for each message:'
  提示: ''
  翻译: '下述代码展示了 Happy Beam 如何在每条消息中序列化光束数据：'
