- 内容: 'Happy Beam'
  提示: ''
  翻译: '快乐光束'
- 内容: 'Leverage a Full Space to create a fun game using ARKit.'
  提示: ''
  翻译: '利用 Full Space 使用 ARKit 创建有趣的游戏。'
- 内容: 'Overview'
  提示: ''
  翻译: '概述'
- 内容: 'In visionOS, you can create fun, dynamic games and apps using several different frameworks to create new kinds of spatial experiences: RealityKit, ARKit, SwiftUI, and Group Activities. This sample introduces Happy Beam, a game where you and your friends can hop on a FaceTime call and play together.'
  提示: ''
  翻译: '在 visionOS 中，您可以使用多种不同的框架创建有趣、动态的游戏和应用，以创建新型空间体验：RealityKit、ARKit、SwiftUI 和小组活动。此示例介绍了 Happy Beam，这是一款游戏，您和朋友可以在其中进行 FaceTime 通话并一起玩。'
- 内容: 'You’ll learn the mechanics of the game where grumpy clouds float around in the space, and people play by making a heart shape with their hands to project a beam. People aim the beam at the clouds to cheer them up, and a score counter keeps track of how well each player does cheering up the clouds.'
  提示: ''
  翻译: '您将学习游戏的机制，其中脾气暴躁的云朵在空间中漂浮，人们通过用手制作心形来投射光束来玩游戏。人们将光束对准云朵以振作起来，记分计数器会跟踪每个玩家在云彩中振作的表现。'
- 内容: 'Design the game interface in SwiftUI'
  提示: ''
  翻译: '在 SwiftUI 中设计游戏界面'
- 内容: 'Most apps in visionOS launch as a window that opens different scene types depending on the needs of the app.'
  提示: ''
  翻译: 'visionOS 中的大多数应用都以窗口的形式启动，该窗口会根据应用的需要打开不同的场景类型。'
- 内容: 'Here you see how Happy Beam presents a fun interface to people by using several SwiftUI views that display a welcome screen, a coaching screen that gives instructions, a scoreboard, and a game-ending screen.'
  提示: ''
  翻译: '在这里，您可以看到 Happy Beam 如何使用多个 SwiftUI 视图向人们呈现一个有趣的界面，这些视图显示欢迎屏幕、提供说明的教练屏幕、记分牌和游戏结束屏幕。'
- 内容: 'The following shows you the primary view in the app that displays each phase of gameplay:'
  提示: ''
  翻译: '下面显示了应用中显示游戏每个阶段的主要视图：'
- 内容: 'When 3D content starts to appear, the game opens an immersive space to present content outside of the main window and in a person’s surroundings.'
  提示: ''
  翻译: ''
- 内容: 'The HappyBeam container view declares a dependency on openImmersiveSpace:'
  提示: ''
  翻译: ''
- 内容: 'It later uses that dependency to open the space from the app’s declaration when it’s time to start showing 3D content:'
  提示: ''
  翻译: ''
- 内容: 'Detect a heart gesture with ARKit'
  提示: ''
  翻译: ''
- 内容: 'The Happy Beam app recognizes the central heart-shaped hands gesture using ARKit’s support for 3D hand tracking in visionOS. Using hand tracking requires a running session and authorization from the wearer. It uses the NSHandsTrackingUsageDescription user info key to explain to players why the app requests permission for hand tracking.'
  提示: ''
  翻译: ''
- 内容: 'Hand-tracking data isn’t available when your app is only displaying a window or volume. Instead, it’s available when you present an immersive space, as in the previous example.'
  提示: ''
  翻译: ''
- 内容: 'You can detect gestures using ARKit data with a level of accuracy that depends on your use case and intended experience. For example, Happy Beam could require strict positioning of finger joints to closely resemble a heart shape. Instead, however, it prompts people to make a heart shape and uses a heuristic to indicate when the gesture is close enough.'
  提示: ''
  翻译: ''
- 内容: 'The following checks whether a person’s thumbs and index fingers are almost touching:'
  提示: ''
  翻译: ''
- 内容: 'Support several kinds of input'
  提示: ''
  翻译: ''
- 内容: 'To support accessibility features and general user preferences, include multiple kinds of input in an app that uses hand tracking as one form of input.'
  提示: ''
  翻译: ''
- 内容: 'Happy Beam supports several kinds of input:'
  提示: ''
  翻译: ''
- 内容: 'Display 3D content with RealityKit'
  提示: ''
  翻译: ''
- 内容: 'The 3D content in the app comes in the form of assets that you can export from Reality Composer Pro. You place each asset in the RealityView that represents your immersive space.'
  提示: ''
  翻译: ''
- 内容: 'The following shows how Happy Beam generates clouds when the game starts, as well as materials for the floor-based beam projector. Because the game uses collision detection to keep score — the beam cheers up grumpy clouds when they collide — you make collision shapes for each model that might be involved.'
  提示: ''
  翻译: ''
- 内容: 'Add SharePlay support for multiplayer gaming experiences'
  提示: ''
  翻译: ''
- 内容: 'You use the Group Activities framework in visionOS to support SharePlay during a FaceTime call. Happy Beam uses Group Activities to sync the score, active players list, and the position of each player’s projected beam.'
  提示: ''
  翻译: ''
- 内容: 'Note'
  提示: ''
  翻译: ''
- 内容: 'Developers using the Apple Vision Pro developer kit can test spatial SharePlay experiences on-device by installing the Persona Preview Profile.'
  提示: ''
  翻译: ''
- 内容: 'Use a reliable channel to send information that’s important to be correct, even if it can be slightly delayed as a result. The following shows how Happy Beam updates the game model’s score state in response to a score message:'
  提示: ''
  翻译: ''
- 内容: 'Use an unreliable messenger for sending data with low-latency requirements. Because the delivery mode is unreliable, some messages might not make it. Happy Beam uses the unreliable mode to send live updates to the position of the beam when each participant in the call chooses the Spatial option in FaceTime.'
  提示: ''
  翻译: ''
- 内容: 'The following shows how Happy Beam serializes beam data for each message:'
  提示: ''
  翻译: ''
