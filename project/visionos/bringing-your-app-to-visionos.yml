- 内容: 'Bringing your existing apps to visionOS'
  提示: ''
  翻译: '将您的现有应用引入 visionOS'
- 内容: 'Build a version of your iPadOS or iOS app using the visionOS SDK, and update your code for platform differences.'
  提示: ''
  翻译: '使用 visionOS SDK 将您的 iPadOS 或 iOS 应用重构一个新版本，并更新代码以适应平台差异。'
- 内容: 'Overview'
  提示: ''
  翻译: '概述'
- 内容: 'If you have an existing app that runs in iPadOS or iOS, you can build that app against the visionOS SDK to run it on the platform. Apps built specifically for visionOS adopt the standard system appearance, and they look more natural on the platform. Updating your app is also an opportunity to add elements that work well on the platform, such as 3D content and immersive experiences.'
  提示: ''
  翻译: '如果您有在 iPadOS 或 iOS 中运行的现存应用，您可以使用 visionOS SDK 构建该应用程序，以便在该平台上运行。为 visionOS 专门构建的应用采用标准系统外观，在该平台上看起来更自然。同时，更新应用也是添加在该平台上吸引眼球的元素（如 3D 内容和沉浸式体验）的好机会。'
- 内容: 'In most cases, all you need to do to support visionOS is update your Xcode project’s settings and recompile your code. Depending on your app, you might need to make additional changes to account for features that are only found in the iOS SDK. While most of the same technologies are available on both platforms, some technologies don’t make sense or require hardware that isn’t present on visionOS devices. For example, people don’t typically use a headset to make contactless payments, so apps that that use the ProximityReader framework must disable those features when running in visionOS.'
  提示: ''
  翻译: '在大多数情况下，您只需、更新 Xcode 的项目设置并重新编译代码即可支持 visionOS。根据你的应用，你可能需要进行其他更改，以解决那些仅在 iOS SDK 中支持的功能。虽然大多数同类技术在两个平台上都可用，有些技术在 visionOS 设备上并不合理，或者需要的硬件并不存在。例如，人们通常不使用头戴式设备进行电子支付，因此使用 ProximityReader 框架的应用在 visionOS 中运行时必须禁用这些功能。'
- 内容: 'Note'
  提示: ''
  翻译: '备注'
- 内容: 'If you use ARKit in your iOS app to create an augmented reality experience, you need to make additional changes to support ARKit in visionOS. For information on how to update this type of app, see Bringing your ARKit app to visionOS.'
  提示: ''
  翻译: ''
- 内容: 'Add visionOS as a supported destination for your app'
  提示: ''
  翻译: ''
- 内容: 'The first step to updating your app is to add visionOS as a supported destination. In your project’s settings, select your app target and navigate to the General tab. In Supported Destinations, click the Add (+) button to add a new destination and select the Apple Vision option. Adding this option lets you build your app specifically for the visionOS SDK.'
  提示: ''
  翻译: ''
- 内容: 'When you add Apple Vision as a destination, Xcode makes some one-time changes to your project’s build settings. After you add the destination, you can modify your project’s build settings and build phases to customize the build behavior specifically for visionOS. For example, you might remove dependencies for the visionOS version of your app, or change the set of source files you want to compile.'
  提示: ''
  翻译: ''
- 内容: 'For more information about how to update a target’s configuration, see Customizing the build phases of a target.'
  提示: ''
  翻译: ''
- 内容: 'Clean up code that uses deprecated APIs'
  提示: ''
  翻译: ''
- 内容: 'Fix any deprecation warnings in the iOS version of your code before you build for visionOS. Apple marks APIs as deprecated when they are no longer relevant or a suitable replacement exists. When you compile code that calls deprecated APIs, the compiler generates warnings and often suggests replacements for you to use instead. visionOS removed many deprecated symbols entirely, turning these deprecation warnings into missing-symbol errors on the platform. Make changes in the iOS version of your app to see the original deprecation warning and replacement details.'
  提示: ''
  翻译: ''
- 内容: 'In addition to individual symbols, the following frameworks are deprecated in their entirety in both iOS and visionOS. If your app still uses these frameworks, stop using them immediately. The reference documentation for each framework includes information about how to update your code.'
  提示: ''
  翻译: ''
- 内容: 'Accounts'
  提示: ''
  翻译: ''
- 内容: 'Address Book'
  提示: ''
  翻译: ''
- 内容: 'Address Book UI'
  提示: ''
  翻译: ''
- 内容: 'Assets Library'
  提示: ''
  翻译: ''
- 内容: 'GLKit'
  提示: ''
  翻译: ''
- 内容: 'iAd'
  提示: ''
  翻译: ''
- 内容: 'Newsstand Kit'
  提示: ''
  翻译: ''
- 内容: 'NotificationCenter'
  提示: ''
  翻译: ''
- 内容: 'OpenGL ES'
  提示: ''
  翻译: ''
- 内容: 'Isolate features that are unavailable in visionOS'
  提示: ''
  翻译: ''
- 内容: 'The iOS SDK includes many frameworks that don’t apply to visionOS, either because they use hardware that isn’t available or their features don’t apply to the platform. Move code that uses these frameworks to separate source files whenever possible, and include those files only in the iOS version of your app.'
  提示: ''
  翻译: ''
- 内容: 'When you can’t isolate the code to separate source files, use conditional statements such as the ones below to offer a different code path for visionOS and iOS. The following example shows how to configure conditional statements to execute separate code paths in visionOS and iOS:'
  提示: ''
  翻译: ''
- 内容: 'The following frameworks are available in the iOS SDK but not in the visionOS SDK.'
  提示: ''
  翻译: ''
- 内容: 'ActivityKit'
  提示: ''
  翻译: ''
- 内容: 'AdSupport'
  提示: ''
  翻译: ''
- 内容: 'AppClip'
  提示: ''
  翻译: ''
- 内容: 'AutomatedDeviceEnrollment'
  提示: ''
  翻译: ''
- 内容: 'BusinessChat'
  提示: ''
  翻译: ''
- 内容: 'CarKey'
  提示: ''
  翻译: ''
- 内容: 'CarPlay'
  提示: ''
  翻译: ''
- 内容: 'Cinematic'
  提示: ''
  翻译: ''
- 内容: 'ClockKit'
  提示: ''
  翻译: ''
- 内容: 'CoreLocationUI'
  提示: ''
  翻译: ''
- 内容: 'CoreMediaIO'
  提示: ''
  翻译: ''
- 内容: 'CoreNFC'
  提示: ''
  翻译: ''
- 内容: 'CoreTelephony'
  提示: ''
  翻译: ''
- 内容: 'DeviceActivity'
  提示: ''
  翻译: ''
- 内容: 'DockKit'
  提示: ''
  翻译: ''
- 内容: 'ExposureNotification'
  提示: ''
  翻译: ''
- 内容: 'FamilyControls'
  提示: ''
  翻译: ''
- 内容: 'FinanceKit'
  提示: ''
  翻译: ''
- 内容: 'FinanceKitUI'
  提示: ''
  翻译: ''
- 内容: 'ManagedSettings'
  提示: ''
  翻译: ''
- 内容: 'ManagedSettingsUI'
  提示: ''
  翻译: ''
- 内容: 'Messages'
  提示: ''
  翻译: ''
- 内容: 'MLCompute'
  提示: ''
  翻译: ''
- 内容: 'NearbyInteraction'
  提示: ''
  翻译: ''
- 内容: 'OpenAL'
  提示: ''
  翻译: ''
- 内容: 'ProximityReader'
  提示: ''
  翻译: ''
- 内容: 'RoomPlan'
  提示: ''
  翻译: ''
- 内容: 'SafetyKit'
  提示: ''
  翻译: ''
- 内容: 'ScreenTime'
  提示: ''
  翻译: ''
- 内容: 'SensorKit'
  提示: ''
  翻译: ''
- 内容: 'ServiceManagement'
  提示: ''
  翻译: ''
- 内容: 'Social'
  提示: ''
  翻译: ''
- 内容: 'Twitter'
  提示: ''
  翻译: ''
- 内容: 'WidgetKit'
  提示: ''
  翻译: ''
- 内容: 'WorkoutKit'
  提示: ''
  翻译: ''
- 内容: 'Some frameworks have behavioral changes that impact your app in visionOS, and some frameworks disable features when the required hardware is unavailable. To help you avoid using APIs for missing features, many frameworks offer APIs to check the availability of those features. Continue to use those APIs and take appropriate actions when the features aren’t available. In other cases, be prepared for the framework code to do nothing or to generate errors when you use it.'
  提示: ''
  翻译: ''
- 内容: 'ARKit. This framework requires you to use different APIs for iOS and visionOS. For more information, see Bringing your ARKit app to visionOS.'
  提示: ''
  翻译: ''
- 内容: 'AutomaticAssessmentConfiguration. The framework returns an error if you try to start a test in visionOS.'
  提示: ''
  翻译: ''
- 内容: 'AVFoundation. Capture interfaces aren’t available in visionOS. Use availability checks to determine which services are present.'
  提示: ''
  翻译: ''
- 内容: 'CallKit. You may continue to offer Voice-over-IP (VoIP) services, but phone number verification, call-blocking, and other cellular-related services are unavailable.'
  提示: ''
  翻译: ''
- 内容: 'ClockKit. The APIs of this framework do nothing in visionOS.'
  提示: ''
  翻译: ''
- 内容: 'CoreHaptics. visionOS plays audio feedback instead of haptic feedback.'
  提示: ''
  翻译: ''
- 内容: 'CoreLocation. You can request someone’s location using the standard location service, but most other services are unavailable. Use availability checks to determine which services are present. The Always authorization level is unavailable and automatically becomes When in Use authorization.'
  提示: ''
  翻译: ''
- 内容: 'CoreMotion. Barometer data is unavailable, but most other sensors are available. Use availability checks to determine which sensors you can use.'
  提示: ''
  翻译: ''
- 内容: 'HealthKit and HealthKitUI. Health data is unavailable. Use availability checks to determine when information is available.'
  提示: ''
  翻译: ''
- 内容: 'MapKit. User-tracking features that involve heading information aren’t available.'
  提示: ''
  翻译: ''
- 内容: 'MediaPlayer. Some APIs are unavailable in visionOS.'
  提示: ''
  翻译: ''
- 内容: 'MetricKit. You can gather on-device diagnostic logs and generate reports, but you can’t gather metrics.'
  提示: ''
  翻译: ''
- 内容: 'MusicKit. Some APIs are unavailable in visionOS.'
  提示: ''
  翻译: ''
- 内容: 'NearbyInteraction. The framework does nothing in visionOS. Use availability checks to determine when services are present.'
  提示: ''
  翻译: ''
- 内容: 'PushToTalk. Push to Talk services are unavailable. Check for errors when creating a PTChannelManager.'
  提示: ''
  翻译: ''
- 内容: 'SafariServices. A link that presents a SFSafariViewController now opens a new scene in the Safari app.'
  提示: ''
  翻译: ''
- 内容: 'UIKit. The system reports a maximum of two simultaneous touch inputs — one for each of the person’s hands. All system gesture recognizers handle these inputs correctly, including for zoom and rotation gestures that require multiple fingers. If you have custom gesture recognizers that require more than two fingers, update them to support only one or two touches in visionOS.'
  提示: ''
  翻译: ''
- 内容: 'VisionKit. The DataScannerViewController APIs are unavailable, but other features are still available.'
  提示: ''
  翻译: ''
- 内容: 'WatchConnectivity. The framework supports connections only between an iPhone and Apple Watch. Use availability checks to determine when services are available.'
  提示: ''
  翻译: ''
- 内容: 'For additional information about how to isolate code to the iOS version of your app, see Running code on a specific platform or OS version.'
  提示: ''
  翻译: ''
- 内容: 'Update your interface to take advantage of visionOS features'
  提示: ''
  翻译: ''
- 内容: 'After your existing code runs correctly in visionOS, look for ways to improve the experience you offer on the platform. In visionOS, you can display content using more than just windows. Think about ways to incorporate the following elements into your interface:'
  提示: ''
  翻译: ''
- 内容: 'Depth. Many SwiftUI and UIKit views use visual effects to add depth. Look for similar ways to incorporate depth into your own custom views.'
  提示: ''
  翻译: ''
- 内容: '3D content. Think about where you might incorporate 3D models and shapes into your content. Use RealityKit to implement your content, and a RealityView to present that content from your app. See Adding 3D content to your app.'
  提示: ''
  翻译: ''
- 内容: 'Immersive experiences. Present a space to immerse someone in your app’s content. Spaces let you place content anywhere in a person’s surroundings. You can also create fully immersive experiences that display only your app’s content. See Creating fully immersive experiences in your app.'
  提示: ''
  翻译: ''
- 内容: 'Interactions with someone’s surroundings. Use ARKit to facilitate interactions between your content and the surroundings. For example, detect planar surfaces to use as anchor points for your content. See ARKit.'
  提示: ''
  翻译: ''
- 内容: 'If you built your interface using UIKit, you can still load iOS storyboards into your app, but you can’t customize your interface for visionOS or include 3D content. To include visionOS content in your app, programmatically add your SwiftUI views using UIHostingController or UIViewRepresentable. Alternatively, migrate the relevant parts of your interface to SwiftUI. Moving your interface to SwiftUI gives you less code to maintain and makes it easier to validate that your interface does what you want.'
  提示: ''
  翻译: ''
- 内容: 'For information about mixing SwiftUI and UIKit content, see UIKit integration in SwiftUI. For guidance on how best to incorporate depth and 3D elements in your interface, see Human Interface Guidelines.'
  提示: ''
  翻译: ''
- 内容: 'Update your app’s assets'
  提示: ''
  翻译: ''
- 内容: 'Add vector-based or high-resolution images to your project specifically to support visionOS. In visionOS, people can view your app’s content at different angles and different distances, so image pixels rarely line up with screen pixels. Vector-based images work best because they maintain their detail and crispness at any size. For bitmap-based images, use high-resolution images (@2x or better) to ensure your images retain detail at different sizes.'
  提示: ''
  翻译: ''
- 内容: 'For more information about designing images for your app, see Images in Human Interface Guidelines.'
  提示: ''
  翻译: ''
- 内容: 'Decide whether to port your app at all'
  提示: ''
  翻译: ''
- 内容: 'In some cases, it might not make sense to port your app for visionOS. For example, don’t port the following types of apps:'
  提示: ''
  翻译: ''
- 内容: 'Apps that act as containers for app extensions. This includes apps where the primary purpose is to deliver custom keyboard extensions, device drivers, sticker packs, SMS and MMS message filtering extensions, call directory extensions, or widgets.'
  提示: ''
  翻译: ''
- 内容: 'Movement-based apps. This includes apps that follow a person’s location changes, such as apps that offer turn-by-turn directions or navigation. It also includes apps that track body movements.'
  提示: ''
  翻译: ''
- 内容: 'Selfie or photography apps. This includes apps where the primary purpose is to capture images or video from the device’s cameras.'
  提示: ''
  翻译: ''
- 内容: 'If your app uses an unsupported feature but can function without it, you can still bring your app to visionOS. Remove features that aren’t available and focus on bringing the rest of your content to the platform. For example, if you have an app that lets people write down notes and take pictures to include with those notes, disable the picture-taking ability in visionOS but let people add text and incorporate images they already have.'
  提示: ''
  翻译: ''
