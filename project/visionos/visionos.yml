- 内容: 'visionOS'
  提示: ''
  翻译: 'visionOS'
- 内容: 'Create a new universe of apps and games for Apple Vision Pro.'
  提示: ''
  翻译: '为 Apple Vision Pro 创造全新的应用和游戏世界。'
- 内容: 'Overview'
  提示: ''
  翻译: '概览'
- 内容: 'visionOS is the operating system that powers Apple Vision Pro. Use visionOS together with familiar tools and technologies to build immersive apps and games for spatial computing.'
  提示: ''
  翻译: 'visionOS 是为 Apple Vision Pro 赋能的操作系统。结合熟悉的工具和技术，用 visionOS 为空间计算构建沉浸式应用和游戏。'
- 内容: 'Developing for visionOS requires a Mac with Apple silicon. Create new apps using SwiftUI to take full advantage of the spectrum of immersion available in visionOS. If you have an existing iPad or iPhone app, add the visionOS destination to your app’s target to gain access to the standard system appearance, and add platform-specific features to create a compelling experience. To provide continuous access to your content in the meantime, deliver a compatible version of your app that runs in visionOS.'
  提示: ''
  翻译: '使用 SwiftUI 为 visionOS 编写应用，充分利用其提供的沉浸式体验。如果您已有 iPad 或 iPhone 应用，将 visionOS 添加到您应用的 target，来展示标准的系统自带外观，并添加 visionOS 平台的特定功能从而创造引人入胜的体验。为了让用户在此期间持续访问您的内容，请提供一个与 visionOS 兼容的应用版本。'
- 内容: 'Expand your app into immersive spaces'
  提示: ''
  翻译: '将您的应用扩展到沉浸式空间'
- 内容: 'Start with a familiar window-based experience to introduce people to your content. From there, add SwiftUI scene types specific to visionOS, such as volumes and spaces. These scene types let you incorporate depth, 3D objects, and immersive experiences.'
  提示: ''
  翻译: '从熟悉的窗口式体验开始，引导用户了解您的内容。在此基础上，为 visionOS 添加特定的 SwiftUI 场景类型，如空间容器(volumes)和空间(spaces)。这些场景类型可以带来深度、3D 对象和沉浸式体验。'
- 内容: 'Build your app’s 3D content with RealityKit and Reality Composer Pro, and display it with a RealityView. In an immersive experience, use ARKit to integrate your content with the person’s surroundings.'
  提示: ''
  翻译: '使用 RealityKit 和 Reality Composer Pro 构建应用内的 3D 内容，并用 RealityView 显示。在沉浸式体验中，使用 ARKit 将您的内容与用户所处的环境进行整合。'
- 内容: 'Explore new kinds of interaction'
  提示: ''
  翻译: '探索新型交互方式'
- 内容: 'People can select an element by looking at it and tapping their fingers together. They can also pinch, drag, zoom, and rotate objects using specific hand gestures. SwiftUI provides built-in support for these standard gestures, so rely on them for most of your app’s input. When you want to go beyond the standard gestures, use ARKit to create custom gestures.'
  提示: ''
  翻译: '用户可以通过注视某个元素，并将两个手指轻敲合并来选择它。他们还可以使用特定的手势进行捏、拖拽、缩放和旋转对象。SwiftUI 为这些标准手势提供了系统支持，因此大多数应用输入都依赖于它们。当您想使用标准手势以外的手势时，可以使用 ARKit 创建自定义手势。'
- 内容: 'Dive into featured sample apps'
  提示: ''
  翻译: '深入了解特色的示例 App'
- 内容: 'Explore the core concepts for all visionOS apps with Hello World. Understand how to detect custom gestures using ARKit with Happy Beam. Discover streaming 2D and stereoscopic media with Destination Video. And learn how to build 3D scenes with RealityKit and Reality Composer Pro with Diorama and Swift Splash.'
  提示: ''
  翻译: '通过 Hello World 探索所有 visionOS App 的核心概念。利用 Happy Beam 了解如何使用 ARKit 识别自定义手势。通过 Destination Video 探索 2D 和立体声媒体。最后通过 Diorama 学习如何使用RealityKit 和 Reality Composer Pro 构建 3D 场景。'
